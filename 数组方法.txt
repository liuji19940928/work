1  concat()
2  join()
3  pop()
4  push()
5  shift()
6  unshift()
7  reverse()
8  slice()
9  splice()
10. sort()
11.indexOf()和 lastIndexOf()
12.forEach()
13.map()
14.filter()
15.every()
16.some()
17.reduce()和 reduceRight()

//1.0 concat() 连接两个或更多数组，该方法不会改变现有的数组，会创造一个副本数组
    var arr = [1, 2, 3, 4];
    var arr1 = [5, 6, 7];
    var arr2 = [8, 9];
    var newarr = arr.concat(arr1, arr2);
    console.log(newarr);



//2.0 join() 该方法只接收一个参数：即分隔符，
	用于把数组中的所有元素放入一个字符串中，元素同个指定字符分割
     var arr = ['zhangsan', 'lisi', 'wangwu'];
     var arr1 = [1, 2, 3, 4, 5, 6]
     var str = arr1.join("+")
     console.log(str)
     console.log(arr)
	通过join()方法可以实现重复字符串，只需传入字符串以及重复的次数，
	就能返回重复后的字符串，函数如下：
	function repeatString(str, n) {
		return new Array(n + 1).join(str);
	}
	console.log(repeatString("abc", 3)); // abcabcabc
	console.log(repeatString("Hi", 5)); // HiHiHiHiHi



//3.0 pop() 用于删除并返回数组的最后一个元素,注意该方法会改变原数组
    var arr=[1,2,3,4,5];
    var num=arr.pop()
    console.log(num)
    console.log(arr)



//4.0 push() 用于向数组末尾添加一个或多个元素，返回数组长度，注意该方法会改变原数组
    /*var arr=[1,2,3,4,5];
    arr.push(6,7,8)
    console.log(arr)*/
    var arr = [1, 2, 3, 4, 5]
    arr.push(6, 7, 8)
    console.log(arr)



//5.0 shift() 删除并返回数组的第一个元素，注意该方法会改变原数组
        var arr=[1,2,3,4,5]
        var a=arr.shift();
        console.log(arr);
        console.log(a)
    var arr = [1, 2, 3, 4, 5]



//6.0 unshift() 向数组开头添加一个或多个元素，返回数组长度，注意该方法会改变原数组
    var arr =[3,4,5,6];
    arr.unshift(1,2);
    console.log(arr)



//7.0 reverse() 颠倒数组中的顺序注意该方法会改变原来的数组
    var arr =[1,2,3,4,5]
    arr.reverse();
    console.log(arr)



//8.0 slice() 从已有数组中返回选定的元素 
	参数一（必须）：从哪里（索引）开始选取  
	参数二（可选）：到哪里（索引）结束（选取不到）,不指定就是到数组结束的所有元素
    	var arr = [1,3,5,7,9,11];
	var arrCopy = arr.slice(1);
	var arrCopy2 = arr.slice(1,4);
	var arrCopy3 = arr.slice(1,-2);
	var arrCopy4 = arr.slice(-4,-1);
	console.log(arr); //[1, 3, 5, 7, 9, 11](原数组没变)
	console.log(arrCopy); //[3, 5, 7, 9, 11]
	console.log(arrCopy2); //[3, 5, 7]
	console.log(arrCopy3); //[3, 5, 7]
	console.log(arrCopy4); //[5, 7, 9]

	arrCopy只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。 
	arrCopy2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。 
	arrCopy3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，
		因此就是从1开始到4（不包括）的子数组。 
	arrCopy4中两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2,5)。



//9.0 splice() 向数组中添加 / 删除项目， 然后返回被删除的项目
	参数一（ 必须）： 规定添加 / 删除项目的索引， 
	参数二（ 必须）： 要删除项目的数量， 如果设置为0， 则不会删除， 
	参数三 ( 可选 )： 向数组添加新的项目, 注意该方法会改变原数组
    var arr = [1, 2, 3, 4, 5, 6]
    arr.splice(2, 2, 8, 9, 10, 11)
    console.log(arr)  //[1, 2, 8, 9, 10, 11, 5, 6]




//10. sort() 对数组元素进行排序
        var arr =[5,4,3,2,1,9,222];
        function sortNum(a,b){
        	return a-b
        };
        arr.sort(sortNum)
        console.log(arr)

	sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。
	比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，
	如果两个参数相等则返回 0，如果第一个参数应该位于第二个之后则返回一个正数
	function compare(value1, value2) {
		if (value1 < value2) {
			return -1;
		} else if (value1 > value2) {
			return 1;
		} else {
			return 0;
		}
	}
	arr2 = [13, 24, 51, 3];
	console.log(arr2.sort(compare)); // [3, 13, 24, 51]
	如果需要通过比较函数产生降序排序的结果，只要交换比较函数返回的值即可：
	function compare(value1, value2) {
		if (value1 < value2) {
			return 1;
		} else if (value1 > value2) {
			return -1;
		} else {
			return 0;
		}
	}
	arr2 = [13, 24, 51, 3];
	console.log(arr2.sort(compare)); // [51, 24, 13, 3]
	



//11.indexOf()和 lastIndexOf()
	indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。
		其中， 从数组的开头（位置 0）开始向后查找。 
	lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。
		其中， 从数组的末尾开始向前查找。

	这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。
	在比较第一个参数与数组中的每一项时，会使用全等操作符。
	var arr = [1,3,5,7,7,5,3,1];
	console.log(arr.indexOf(5)); //2
	console.log(arr.lastIndexOf(5)); //5
	console.log(arr.indexOf(5,2)); //2
	console.log(arr.lastIndexOf(5,4)); //2
	console.log(arr.indexOf("5")); //-1



//12.forEach()
	forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。
	这个方法没有返回值。参数都是function类型，默认有传参，
	参数分别为：遍历的数组内容；第对应的数组索引，数组本身。

	var arr = [1, 2, 3, 4, 5];
	arr.forEach(function(x, index, a){
		console.log(x + '|' + index + '|' + (a === arr));
	});
	// 输出为：
	// 1|0|true
	// 2|1|true
	// 3|2|true
	// 4|3|true
	// 5|4|true





//13.map()  返回值为数组
	map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。
	下面代码利用map方法实现数组中每个数求平方。
	var arr = [1, 2, 3, 4, 5];
	var arr2 = arr.map(function(item){
		return item*item;
	});
	console.log(arr2); //[1, 4, 9, 16, 25]




//14.filter()	返回值为数组
	filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。
	var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	var arr2 = arr.filter(function(value, index) {
		return index % 3 === 0 || value >= 8;
	}); 
	console.log(arr2); //[1, 4, 7, 8, 9, 10]



//15.every()	返回值为true/false
	every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。
	var arr = [1, 2, 3, 4, 5];
	var isTrue1 = arr.every(function(x) {
		return x < 10;
	}); 
	console.log(isTrue1); //true
	var isTrue2 = arr.every(function(x) {
		return x < 3;
	}); 
	console.log(isTrue2); // false



//16.some()	返回值为true/false
	some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。
	var arr = [1, 2, 3, 4, 5];
	var isTrue1 = arr.some(function(x) {
		return x < 3;
	}); 
	console.log(isTrue1); //true
	var isTrue2 = arr.some(function(x) {
		return x < 1;
	}); 
	console.log(isTrue2); // false



//17.reduce()和 reduceRight()
	这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。
	reduce()方法从数组的第一项开始，逐个遍历到最后。
	而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。
	这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。
	传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。
	这个函数返回的任何值都会作为第一个参数自动传给下一项。
	第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。
	
	下面代码用reduce()实现数组求和，数组一开始加了一个初始值10。
	var values = [1,2,3,4,5];
	var sum = values.reduceRight(function(prev, cur, index, array){
		return prev + cur;
	},10);
	console.log(sum); //25






























